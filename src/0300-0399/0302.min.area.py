from typing import List

class Solution:
  def minArea(self, image: List[List[str]], x: int, y: int) -> int:
    """O(MN), BFS + find xmin, xmax, ymin, ymax.
    """
    n = len(image)
    if n == 0:
      return 0
    m = len(image[0])
    if m == 0:
      return 0
    dxdy = [(1, 0), (0, 1), (-1, 0), (0, -1)]
    visited, boundary, extended = set([]), set([(x, y), ]), set([])
    xmin, xmax, ymin, ymax = x, x, y, y
    while boundary:
      while boundary:
        x, y = boundary.pop()
        visited.add((x, y))
        for dx, dy in dxdy:
          i, j = x + dx, y + dy
          if 0 <= i < n and 0 <= j < m and (i, j) not in visited and (i, j) not in boundary:
            if image[i][j] == "1":
              xmin = min(i, xmin)
              xmax = max(xmax, i)
              ymin = min(j, ymin)
              ymax = max(ymax, j)
              extended.add((i, j))
              # print(f"{i=}, {j=}, {image[i][j]=}, {xmin=}, {xmax=}, {ymin=}, {ymax=}")
            visited.add((i, j))
      boundary, extended = extended, set([])
    return (xmax - xmin + 1) * (ymax - ymin + 1)

# TODO: binary search, on fly projection to row/col, so region, O(NlogM + MlogN).

if __name__ == '__main__':
  solver = Solution()
  cases = [
    ([["0","0","1","0"],["0","1","1","0"],["0","1","0","0"]], 0, 2),
    ([
      ["0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","0","1","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","1","1","1","1","1","0","1","1","1","1","1","0","0","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","1","0","0","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","1","0","0","0","1","1","1","1","1","1","1","0","0","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","0","0","0","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","0","0","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","0","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","0","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","0","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","0","0","0","0","0","1","1","1","1","0","1","0","0","0","0","0","0","0","0","0"],
      ["0","0","0","0","0","0","0","0","0","0","0","0","1","1","0","0","0","0","0","0","0","0","0","0","0"]
    ], 9, 9)
  ]
  rslts = [solver.minArea(image, x, y) for image, x, y in cases]
  for cs, rs in zip(cases, rslts):
    print(f"case: {cs} | solution: {rs}")